//
//  main.cpp
//  leetcode
//
//  Created by hatlonely on 16/1/10.
//  Copyright © 2016年 hatlonely. All rights reserved.
//

#define MAIN_NAMESPACE(name) namespace name { extern int main(int argc, const char *argv[]); }

MAIN_NAMESPACE(two_sum)
MAIN_NAMESPACE(add_two_numbers)
MAIN_NAMESPACE(longest_substring_without_repeating_characters)
MAIN_NAMESPACE(median_of_two_sorted_arrays)
MAIN_NAMESPACE(longest_palindromic_substring)
MAIN_NAMESPACE(zigzag_conversion)
MAIN_NAMESPACE(reverse_integer)
MAIN_NAMESPACE(string_to_integer)
MAIN_NAMESPACE(palindrome_number)
MAIN_NAMESPACE(regular_expression_matching)
MAIN_NAMESPACE(container_with_most_water)
MAIN_NAMESPACE(integer_to_roman)
MAIN_NAMESPACE(roman_to_integer)
MAIN_NAMESPACE(longest_common_prefix)
MAIN_NAMESPACE(three_sum)
MAIN_NAMESPACE(three_sum_closest)
MAIN_NAMESPACE(letter_combinations_of_a_phone_number)
MAIN_NAMESPACE(four_sum)
MAIN_NAMESPACE(remove_nth_node_from_end_of_list)
MAIN_NAMESPACE(valid_parentheses)
MAIN_NAMESPACE(merge_two_sorted_lists_my_submissions_question)
MAIN_NAMESPACE(generate_parentheses)
MAIN_NAMESPACE(merge_k_sorted_lists)
MAIN_NAMESPACE(swap_nodes_in_pairs)
MAIN_NAMESPACE(reverse_nodes_in_k_group)
MAIN_NAMESPACE(remove_duplicates_from_sorted_array)
MAIN_NAMESPACE(remove_element)
MAIN_NAMESPACE(implement_strstr)
MAIN_NAMESPACE(divide_two_integers)
MAIN_NAMESPACE(substring_with_concatenation_of_all_words)
MAIN_NAMESPACE(next_permutation)
MAIN_NAMESPACE(longest_valid_parentheses)
MAIN_NAMESPACE(search_in_rotated_sorted_array)
MAIN_NAMESPACE(search_for_a_range)
MAIN_NAMESPACE(search_insert_position)
MAIN_NAMESPACE(valid_sudoku)
MAIN_NAMESPACE(sudoku_solver)
MAIN_NAMESPACE(count_and_say)
MAIN_NAMESPACE(combination_sum)
MAIN_NAMESPACE(combination_sum_ii)
MAIN_NAMESPACE(first_missing_positive)
MAIN_NAMESPACE(trapping_rain_water)
MAIN_NAMESPACE(multiply_strings)
MAIN_NAMESPACE(wildcard_matching)
MAIN_NAMESPACE(jump_game_ii)
MAIN_NAMESPACE(permutations)
MAIN_NAMESPACE(permutations_ii)
MAIN_NAMESPACE(rotate_image)
MAIN_NAMESPACE(group_anagrams)
MAIN_NAMESPACE(pow_x_n)
MAIN_NAMESPACE(n_queens)
MAIN_NAMESPACE(n_queens_ii)
MAIN_NAMESPACE(maximum_subarray)
MAIN_NAMESPACE(spiral_matrix)
MAIN_NAMESPACE(jump_game)
MAIN_NAMESPACE(merge_intervals)
MAIN_NAMESPACE(insert_interval)
MAIN_NAMESPACE(length_of_last_word)
MAIN_NAMESPACE(spiral_matrix_ii)
MAIN_NAMESPACE(permutation_sequence)
MAIN_NAMESPACE(rotate_list)
MAIN_NAMESPACE(unique_paths)
MAIN_NAMESPACE(unique_paths_ii)
MAIN_NAMESPACE(minimum_path_sum)
MAIN_NAMESPACE(valid_number)
MAIN_NAMESPACE(plus_one)
MAIN_NAMESPACE(add_binary)
MAIN_NAMESPACE(text_justification)
MAIN_NAMESPACE(sqrt_x)
MAIN_NAMESPACE(climbing_stairs)
MAIN_NAMESPACE(simplify_path)
MAIN_NAMESPACE(edit_distance)
MAIN_NAMESPACE(set_matrix_zeroes)
MAIN_NAMESPACE(search_a_2d_matrix)
MAIN_NAMESPACE(sort_colors)
MAIN_NAMESPACE(minimum_window_substring)
MAIN_NAMESPACE(combinations)
MAIN_NAMESPACE(subsets)
MAIN_NAMESPACE(word_search)
MAIN_NAMESPACE(remove_duplicates_from_sorted_array_ii)
MAIN_NAMESPACE(search_in_rotated_sorted_array_ii)
MAIN_NAMESPACE(remove_duplicates_from_sorted_list_ii)
MAIN_NAMESPACE(remove_duplicates_from_sorted_list)
MAIN_NAMESPACE(largest_rectangle_in_histogram)
MAIN_NAMESPACE(maximal_rectangle)
MAIN_NAMESPACE(partition_list)
MAIN_NAMESPACE(scramble_string)
MAIN_NAMESPACE(merge_sorted_array)
MAIN_NAMESPACE(gray_code)
MAIN_NAMESPACE(subsets_ii)
MAIN_NAMESPACE(decode_ways)
MAIN_NAMESPACE(reverse_linked_list_ii)
MAIN_NAMESPACE(restore_ip_addresses)
MAIN_NAMESPACE(binary_tree_inorder_traversal)
MAIN_NAMESPACE(unique_binary_search_trees_ii)
MAIN_NAMESPACE(unique_binary_search_trees)
MAIN_NAMESPACE(interleaving_string)
MAIN_NAMESPACE(validate_binary_search_tree)
MAIN_NAMESPACE(recover_binary_search_tree)
MAIN_NAMESPACE(same_tree)
MAIN_NAMESPACE(symmetric_tree)
MAIN_NAMESPACE(binary_tree_level_order_traversal)
MAIN_NAMESPACE(binary_tree_zigzag_level_order_traversal)
MAIN_NAMESPACE(maximum_depth_of_binary_tree)
MAIN_NAMESPACE(construct_binary_tree_from_preorder_and_inorder_traversal)
MAIN_NAMESPACE(construct_binary_tree_from_inorder_and_postorder_traversal)
MAIN_NAMESPACE(binary_tree_level_order_traversal_ii)
MAIN_NAMESPACE(convert_sorted_array_to_binary_search_tree)
MAIN_NAMESPACE(convert_sorted_list_to_binary_search_tree)
MAIN_NAMESPACE(balanced_binary_tree)
MAIN_NAMESPACE(minimum_depth_of_binary_tree)
MAIN_NAMESPACE(path_sum)
MAIN_NAMESPACE(path_sum_ii)
MAIN_NAMESPACE(flatten_binary_tree_to_linked_list)
MAIN_NAMESPACE(distinct_subsequences)
MAIN_NAMESPACE(populating_next_right_pointers_in_each_node)
MAIN_NAMESPACE(populating_next_right_pointers_in_each_node_ii)
MAIN_NAMESPACE(pascal_s_triangle)
MAIN_NAMESPACE(pascal_s_triangle_ii)
MAIN_NAMESPACE(triangle)
MAIN_NAMESPACE(best_time_to_buy_and_sell_stock)
MAIN_NAMESPACE(best_time_to_buy_and_sell_stock_ii)
MAIN_NAMESPACE(best_time_to_buy_and_sell_stock_iii)
MAIN_NAMESPACE(binary_tree_maximum_path_sum)
MAIN_NAMESPACE(valid_palindrome)
MAIN_NAMESPACE(word_ladder_ii)
MAIN_NAMESPACE(word_ladder)
MAIN_NAMESPACE(longest_consecutive_sequence)
MAIN_NAMESPACE(sum_root_to_leaf_numbers)
MAIN_NAMESPACE(surrounded_regions)
MAIN_NAMESPACE(palindrome_partitioning)
MAIN_NAMESPACE(palindrome_partitioning_ii)
MAIN_NAMESPACE(clone_graph)
MAIN_NAMESPACE(gas_station)
MAIN_NAMESPACE(candy)
MAIN_NAMESPACE(single_num)
MAIN_NAMESPACE(single_number_ii)
MAIN_NAMESPACE(copy_list_with_random_pointer)
MAIN_NAMESPACE(word_break)
MAIN_NAMESPACE(word_break_ii)
MAIN_NAMESPACE(linked_list_cycle)
MAIN_NAMESPACE(linked_list_cycle_ii)
MAIN_NAMESPACE(reorder_list)
MAIN_NAMESPACE(binary_tree_preorder_traversal)
MAIN_NAMESPACE(binary_tree_postorder_traversal)
MAIN_NAMESPACE(lru_cache)
MAIN_NAMESPACE(insertion_sort_list)
MAIN_NAMESPACE(sort_list)
MAIN_NAMESPACE(max_points_on_a_line)
MAIN_NAMESPACE(evaluate_reverse_polish_notation)
MAIN_NAMESPACE(reverse_words_in_a_string)
MAIN_NAMESPACE(maximum_product_subarray)
MAIN_NAMESPACE(find_minimum_in_rotated_sorted_array)
MAIN_NAMESPACE(find_minimum_in_rotated_sorted_array_ii)
MAIN_NAMESPACE(min_stack)
MAIN_NAMESPACE(intersection_of_two_linked_lists)
MAIN_NAMESPACE(find_peak_element)

int main(int argc, const char *argv[]) {
    return find_peak_element::main(argc, argv);
}


